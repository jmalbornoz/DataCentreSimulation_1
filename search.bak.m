function [S, idx, IT_idx, pwr_tgt, load] = search(S, num_Nodes, ITloads, IT_idx, av_temp, load)
%% 
%% The purpose of this function is to search for IT loads, CRACs, chillers
%% and leaf nodes when a node with a degree greater than one has been
%% reached.
%%
%% * S = structure containing node information
%% * IT_idx = counter for IT loads
%% * num_Nodes = number of nodes
%% * av_temp = average ambient temperature
%%
%% Searches for IT loads, CRACs, chillers and leaf nodes
%% in the data centre tree
%%
%% Jose Albornoz
%% Fujitsu Laboratories of Europe
%% January 2011 
%%

if length(ITloads) - IT_idx >= 0    % are there more IT loads?
            
    idx = ITloads(IT_idx);     % current IT load
    load = S(idx).Load;        % assigns load to node         
    heat = S(idx).Load;        % heat generated by this IT load node
    S(idx).Pwr = load;         % power dissipated by this IT load node
    S(idx).Req = load;         % power required by the IT node
                
    % next IT node
    IT_idx = IT_idx + 1;
         
    % finds target node
    % finds degree of target node
    for i = 1:S(idx).NumConn
        if S(idx).Conn(i) == 1
            pwr_tgt = S(idx).Target(i);
        elseif S(idx).Conn(i) == -1
            cool_tgt = S(idx).Target(i);
        end
    end

    % IT heat load is removed by CRAC
    S(cool_tgt).Load = S(cool_tgt).Load + heat;    % heat applied to CRAC
    S(cool_tgt).Degree = S(cool_tgt).Degree + 1;   % degree of CRAC node is reduced by 1

else
             
    % looks for unvisited cooling nodes, leaf nodes, splitters
    i = 1;
    while i <= num_Nodes
                    
        % found an unvisited COOLING node, all associated heat sources accounted for
        if strcmp(S(i).Type,'COOLING') & S(i).NumConn == 2 & S(i).Visit == 0 & S(i).Degree == 0
                
            idx = i;
            % finds target nodes
            for j = 1:S(idx).NumConn
                if S(idx).Conn(j) == 1
                    pwr_tgt = S(idx).Target(j);
                elseif S(idx).Conn(j) == -1    % there is an associated cooling device
                    cool_tgt = S(idx).Target(j);
                end
            end
                    
            load = S(idx).Load;        % heat load in cooling node
             
            pwr = S(idx).Fit(load);    % power consumed by cooling node node
            S(idx).Pwr = pwr;          % heat dissipated by cooling node
            heat = load + pwr;         % load for the next node in cooling chain
            load = pwr;                % load for next node in the power chain
            S(idx).Req = load;         % power required by the node
            S(cool_tgt).Load = S(cool_tgt).Load + heat; % heat passed to next node in cooling chain
            S(cool_tgt).Degree = S(cool_tgt).Degree + 1; % decreases next cooling node degree by 1 
            break;
                    
         % found a terminal node in the cooling chain
         elseif strcmp(S(i).Type,'COOLING') & S(i).NumConn == 1 & S(i).Visit == 0 & S(i).Load ~= 0
                    
             idx = i;
             % finds target node
             pwr_tgt = S(idx).Target;
             load = S(idx).Load;   % applied heat load     
             pwr = S(idx).Fit(av_temp,load);     % node power draw 
             S(idx).Pwr = pwr;     % power consumed by node
             S(idx).Req = pwr;     % power required by node            
             load = pwr;           % load for next node in the power chain
             break;
         
         % found an unvisited distributor, all associated heat sources accounted for
         elseif strcmp(S(i).Type,'DISTRIBUTOR') & S(i).Visit == 0 & S(i).Degree == 0   
             
             idx = i;
             load = S(idx).Load;
             
             % looks for targets, distributes heat
             for j = 1:S(idx).NumConn
                 cool_tgt = S(idx).Target(j);     % associated cooling node
                 weight = S(idx).Fit(j);          % weight associated to distributor tap
                 S(cool_tgt).Load = S(cool_tgt).Load + weight*load;   % applies load to cooling node
                 S(cool_tgt).Degree = S(cool_tgt).Degree + 1;   % decreases degree of cooling node by 1
             end   
             S(idx).Visit = 1;
             i = 0;
              
         % found a leaf node (e.g. 'OTHER' node)    
         elseif S(i).Visit == 0 & S(i).Degree == 0 & S(i).NumConn ~= 0
                    
             idx = i;
             load = S(idx).Load;    % load for next node in the power chain
             heat = load;
             S(idx).Pwr = load;     % power consumed by leaf node
             S(idx).Req = load;     % power required by chiller node                        
             
             % finds target nodes
             for n = 1:S(idx).NumConn
                 if S(idx).Conn(n) == 1
                     pwr_tgt = S(idx).Target(n);
                 end
                 if S(idx).Conn(n) == -1              % heat is removed by a CRAC
                     cool_tgt = S(idx).Target(n);     % finds CRAC node 
                     S(cool_tgt).Load = S(cool_tgt).Load + heat;    % heat is applied to CRAC node
                     S(cool_tgt).Degree = S(cool_tgt).Degree + 1;   % degree of CRAC node is reduced by 1
                 end
             end
             break;
 
         end
         i = i + 1;       
     end
            
 end