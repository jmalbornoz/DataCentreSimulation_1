function [S, idx, IT_idx, pwr_tgt, load] = search(S, num_Nodes, ITloads, IT_idx, av_temp, load, mode)
%% 
%% The purpose of this function is to search for IT loads, cooling nodes,
%% distributors, and leaf nodes when a node with a degree greater than one has been
%% reached.
%%
%% * S = structure containing node information
%% * IT_idx = counter for IT loads
%% * num_Nodes = number of nodes
%% * av_temp = average ambient temperature
%% * mode = redundancy mode (0 = active load sharing, 1 = standby)
%%
%% Searches for IT loads, CRACs, chillers and leaf nodes
%% in the data centre tree
%%
%% Jose Albornoz
%% Fujitsu Laboratories of Europe
%% October 2011 
%%

if length(ITloads) - IT_idx >= 0    % are there more IT loads?
            
    idx = ITloads(IT_idx);     % current IT load
    load = S(idx).Load;        % assigns load to node         
    heat = S(idx).Load;        % heat generated by this IT load node
    S(idx).Pwr = load;         % power dissipated by this IT load node
    S(idx).Draw = load;         % power drawn by the IT node
                
    % next IT node
    IT_idx = IT_idx + 1;
         
    % finds POWER and COOLING target nodes
    for i = 1:S(idx).NumConn
        if S(idx).Conn(i) == 1
            pwr_tgt = S(idx).Target(i);      
        elseif S(idx).Conn(i) == -1
            cool_tgt = S(idx).Target(i);
        end
    end

    % IT heat load is removed by CRAC
    S(cool_tgt).Load = S(cool_tgt).Load + heat;    % heat applied to CRAC
    S(cool_tgt).Degree = S(cool_tgt).Degree + 1;   % degree of CRAC node is reduced by 1

else
             
    % looks for unvisited cooling nodes, leaf nodes, splitters
    i = 1;
    while i <= num_Nodes
                    
        % found an unvisited COOLING node, all associated heat sources accounted for
        if strcmp(S(i).Type,'COOLING') & S(i).Visit == 0 & S(i).Degree == 0
                
            idx = i;       
            load = S(idx).Load;        % heat load in cooling node
            
            % intermediate COOLING node
            if(S(idx).NumConn == 2)
 
                % finds POWER and COOLING target nodes
                for j = 1:S(idx).NumConn
                    if S(idx).Conn(j) == 1
                        pwr_tgt = S(idx).Target(j);
                    elseif S(idx).Conn(j) == -1    % there is an associated cooling device
                        cool_tgt = S(idx).Target(j);
                    end
                end
               
                % calculates power consumption
                if S(idx).Dim == 1       % 1-D device
                    pwr = loss_1(S,idx,mode,load);
                elseif S(idx).Dim == 2   % 2-D device
                    pwr = loss_2(S,idx,mode,load,av_temp);
                end
     
                heat = load + pwr;         % heat load for next device.
                S(cool_tgt).Load = S(cool_tgt).Load + heat;   % heat passed to next node in cooling chain
                S(cool_tgt).Degree = S(cool_tgt).Degree + 1;  % decreases next cooling node degree by 1              
                            
            % terminal (heat rejection) node: only a POWER connection    
            elseif(S(idx).NumConn == 1)
                
                pwr_tgt = S(idx).Target;
                
                 % calculates power consumption
                if S(idx).Dim == 1       % 1-D device
                    pwr = loss_1(S,idx,mode,load);
                elseif S(idx).Dim == 2   % 2-D device
                    pwr = loss_2(S,idx,mode,load,av_temp);
                end
          
                heat = load + pwr;         % heat load dumped into the environment.
                
            end
        
            load = pwr;                % load for next node in the power chain
            S(idx).Pwr = heat;         % heat load for next cooling device
            S(idx).Draw = load;         % total power drawn by the node
           
            break;
             
         % found an unvisited distributor, all associated heat sources accounted for
         elseif strcmp(S(i).Type,'DISTRIBUTOR') & S(i).Visit == 0 & S(i).Degree == 0   
             
             idx = i;
             load = S(idx).Load;
             
             % looks for targets, distributes heat
             for j = 1:S(idx).NumConn
                 cool_tgt = S(idx).Target(j);     % associated cooling node
                 weight = S(idx).Points(j);       % weight associated to distributor tap
                 S(cool_tgt).Load = S(cool_tgt).Load + weight*load;   % applies load to cooling node
                 S(cool_tgt).Degree = S(cool_tgt).Degree + 1;   % decreases degree of cooling node by 1
             end   
             S(idx).Visit = 1;          % marks node as visited
             i = 0;                     % restars search procedure
              
         % found a leaf node (e.g. 'OTHER' node)    
         elseif S(i).Visit == 0 & S(i).Degree == 0 & S(i).NumConn ~= 0
                    
             idx = i;
             
             % cooling leaf node, no power connection (e.g. cold water reservoir)
             if S(idx).NumConn == 1 && S(idx).Conn(1) == -1    % pasive cooling device
             
                load = S(idx).Load;              % heat load produced by device
                cool_tgt = S(idx).Target(1);     % associated cooling node
                heat = load;
                S(cool_tgt).Load = S(cool_tgt).Load + heat;    % heat is applied to cooling node
                S(cool_tgt).Degree = S(cool_tgt).Degree + 1;   % degree of cooling node is reduced by 1 
                
                S(idx).Visit = 1;          % marks node as visited
                i = 0;                     % restars search procedure
             
             else     % normal leaf node with power connection
             
                load = S(idx).Load;    % load for next node in the power chain
                heat = load;
                S(idx).Pwr = load;     % power consumed/dissipated by leaf node
                S(idx).Draw = load;     % total power drawn by cooling node                        
             
                % finds target nodes
                for n = 1:S(idx).NumConn
                    if S(idx).Conn(n) == 1
                        pwr_tgt = S(idx).Target(n);
                    end
                    if S(idx).Conn(n) == -1              % heat is removed by a cooling node
                        cool_tgt = S(idx).Target(n);     % finds cooling node 
                        S(cool_tgt).Load = S(cool_tgt).Load + heat;    % heat is applied to cooling node
                        S(cool_tgt).Degree = S(cool_tgt).Degree + 1;   % degree of CRAC node is reduced by 1
                    end
                end
                break
             end

 
         end
         i = i + 1;       
     end
            
 end